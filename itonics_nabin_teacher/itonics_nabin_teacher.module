<?php


global $job_types;

$job_types = [
    'full-time' => 'Full Time',
    'part-time' => 'Part Time',
];
// for future MVC tryout
module_load_include('php', 'itonics_nabin_teacher', 'src/Controllers/ItonicsNabinTeacherEntityBaseController');
module_load_include('php', 'itonics_nabin_teacher', 'src/Controllers/ItonicsNabinTeacherController');
module_load_include('php', 'itonics_nabin_teacher', 'src/Controllers/ItonicsNabinStateController');
module_load_include('php', 'itonics_nabin_teacher', 'src/Controllers/ItonicsNabinDistrictController');
module_load_include('php', 'itonics_nabin_teacher', 'src/Entities/ItonicsNabinTeacherEntity');
module_load_include('php', 'itonics_nabin_teacher', 'src/Entities/ItonicsNabinStateEntity');
module_load_include('php', 'itonics_nabin_teacher', 'src/Entities/ItonicsNabinDistrictEntity');
// ajax_command_invoke() for validation and submit

function itonics_nabin_teacher_init() {
    // invoke for first time only
//    itonics_nabin_teacher_insert_sample_data();
}

/**
 * @return array
 */
function itonics_nabin_teacher_entity_info(): array
{
    $info["itonics_nabin_teacher"] = [
        "label" => "Itonics Nabin Teacher",
        "controller class" => "ItonicsNabinTeacherController",
        "entity class" => "ItonicsNabinTeacherEntity",
        "base table" => "itonics_nabin_teacher_information",
        "fieldable" => TRUE,
        "entity keys" => [
            "id" => "teacher_id",
            "label" => "first_name",
        ],
        "static cache" => TRUE,
    ];
    $info["itonics_nabin_state"] = [
        "label" => "Itonics Nabin States",
        "controller class" => "ItonicsNabinStateController",
        "entity class" => "ItonicsNabinStateEntity",
        "base table" => "itonics_nabin_states",
        "fieldable" => TRUE,
        "entity keys" => [
            "id" => "state_id",
        ],
        "static cache" => TRUE,
    ];
    $info["itonics_nabin_district"] = [
        "label" => "Itonics Nabin Districts",
        "controller class" => "ItonicsNabinDistrictController",
        "entity class" => "ItonicsNabinDistrictEntity",
        "base table" => "itonics_nabin_district",
        "fieldable" => TRUE,
        "entity keys" => [
            "id" => "district_id",
        ],
        "static cache" => TRUE,
    ];

    return $info;
}

/**
 * Inserts sample data in `itonics_nabin_states` and `itonics_nabin_district` tables
 * if the mentioned tables are empty
 *
 * @return void
 * @throws Exception
 */
function itonics_nabin_teacher_insert_sample_data(): void
{
    entity_get_controller("itonics_nabin_teacher")->populateSampleDataForStatesAndDistricts();
}


/**
 * @return array[]
 */
function itonics_nabin_teacher_menu(): array
{
    return [
        'admin/itonics-nabin-teachers' => [
            'title' => 'ITONICS TEACHERS',
            'description' => 'List all teachers',
            'page callback' => 'itonics_nabin_teacher_list',
            'access arguments' => ['view teachers'],
            'type' => MENU_NORMAL_ITEM,
        ],
        'admin/itonics-nabin-teacher/add' => [
            'title' => 'Add Teacher',
            'description' => 'Add teacher',
            'page callback' => 'itonics_nabin_teacher_add',
//            'page arguments' => ['itonics_nabin_teacher_form'],
            'access arguments' => ['add new teacher'],
            'type' => MENU_NORMAL_ITEM,
        ],
        'admin/itonics-nabin-teacher/edit/%itonics_nabin_teacher' => [
            'title' => 'Edit Teacher',
            'description' => 'Edit teacher',
            'page callback' => 'drupal_get_form',
            'page arguments' => ['itonics_nabin_teacher_form', 3],
            'access arguments' => ['edit teacher'],
            'type' => MENU_CALLBACK,
        ],
        'admin/itonics-nabin-teacher/delete/%itonics_nabin_teacher' => [
            'title' => 'Delete Teacher',
            'description' => 'Delete Teacher',
            'page callback' => 'drupal_get_form',
            'page arguments' => ['itonics_nabin_teacher_delete_form', 3],
            'access arguments' => ['delete teacher'],
            'type' => MENU_CALLBACK,
        ],
        'admin/itonics-nabin-teacher/view/%itonics_nabin_teacher' => [
            'title' => 'View Teacher',
            'description' => 'View Teacher',
            'page callback' => 'itonics_nabin_teacher_view',
            'page arguments' => [3],
            'access arguments' => ['view teachers'],
            'type' => MENU_CALLBACK,
        ],
    ];
}

/**
 * @return array|mixed|null
 * @throws EntityMalformedException
 */
function itonics_nabin_teacher_add(): mixed
{
    $newTeacher = entity_get_controller("itonics_nabin_teacher")->getNewTeacher();
    return drupal_get_form('itonics_nabin_teacher_form', $newTeacher);
}

/**
 * @return false|mixed
 */
function itonics_nabin_teacher_load($teacher_id = NULL, $reset = FALSE): mixed
{
    $teacher_ids = isset($teacher_id) ? [$teacher_id] : [];
    $teacher = entity_load("itonics_nabin_teacher", $teacher_ids, [], $reset);
    return $teacher ? reset($teacher) : FALSE;
}

/**
 * @return array[]
 */
function itonics_nabin_teacher_permission(): array
{
    return [
        'view teachers' => [
            'title' => 'View teachers',
            'description' => 'View list of teachers.',
        ],
        'add new teacher' => [
            'title' => 'Add teacher',
            'description' => 'Add teacher',
        ],
        'edit teacher' => [
            'title' => 'Edit teacher',
            'description' => 'Update the teacher data',
        ],
        'delete teacher' => [
            'title' => 'Delete teacher',
            'description' => 'Delete the selected teacher.',
        ],
    ];
}

/**
 * @return array
 * @throws Exception
 */
function itonics_nabin_teacher_list(): array
{
    global $genders, $job_types;
    $headers = [
        'profile_picture' => [
            'data' => 'Profile Picture',
            'field' => 'profile_picture',
        ],
        'first_name' => [
            'data' => 'First Name',
            'field' => 'first_name',
            'sort' => true,
        ],
        'last_name' => [
            'data' => 'Last Name',
            'field' => 'last_name',
        ],
        'gender' => [
            'data' => 'Gender',
            'field' => 'gender',
        ],
        'job_type' => [
            'data' => 'Job Type',
            'field' => 'job_type',
        ],
        'join_date' => [
            'data' => 'Join Date',
            'field' => 'join_date',
        ],
        'actions' => [
            'data' => 'Actions',
        ]
    ];

    $rows = [];

    $results = entity_get_controller("itonics_nabin_teacher")->listAll($headers);

    foreach ($results as $row) {
        $image = '';
        if (!empty($row->profile_picture)) {
            $file = file_load($row->profile_picture);
            if ($file) {
                $image = theme('image_style', [
                    'style_name' => 'thumbnail',
                    'path' => $file->uri,
                    'alt' => $row->first_name,
                    'title' => $row->first_name,
                ]);
            }
        }
        $selected_job_types = array_map(function ($job_type) use ($job_types) {
            return $job_types[$job_type];
        }, @unserialize($row->job_type));

        $teacher_row = [
            'profile_picture' => $image,
            'first_name' => check_plain($row->first_name),
            'last_name' => check_plain($row->last_name),
            'gender' => $row->gender ? $genders[$row->gender] : null,
            'job_type' => count($selected_job_types) ? (implode(', ', $selected_job_types)) : null,
            'join_date' => format_date($row->join_date, 'custom', 'Y-m-d'),
            'actions' => [
                'data' => [
                    '#theme' => 'links',
                    '#links' => [
                        'view' => [
                            'title' => 'View',
                            'href' => 'admin/itonics-nabin-teacher/view/' . $row->teacher_id,
                        ],
                    ],
                    '#attributes' => [
                        'class' => ['links', 'inline'],
                    ],
                ],
            ],
        ];
        if (user_access('edit teacher')) {
            $teacher_row['actions']['data']['#links']['edit'] = [
                'title' => 'Edit',
                'href' => 'admin/itonics-nabin-teacher/edit/' .  $row->teacher_id,
            ];
        }
        if (user_access('delete teacher')) {
            $teacher_row['actions']['data']['#links']['delete'] = [
                'title' => 'Delete',
                'href' => 'admin/itonics-nabin-teacher/delete/' . $row->teacher_id,
            ];
        }

        $rows[] = $teacher_row;
    }

    $build['teachers_table'] = [
        '#theme' => 'table',
        '#header' => $headers,
        '#rows' => $rows,
        '#empty' => 'No teachers',
    ];
    $build['pager'] = [
        '#theme' => 'pager',
    ];

    if (user_access('add new teacher')) {
        $build['add_link'] = [
            '#markup' => l('Add Teacher', 'admin/itonics-nabin-teacher/add'),
        ];
    }

    return $build;
}


/**
 * @param $district
 * @return array
 * @throws EntityMalformedException
 */
function _itonics_nabin_ajax_get_states($district = null): array
{
    $records = entity_get_controller('itonics_nabin_state')->getAllWithoutPagination(["state_id", "state_name"]);

    $states = [];
    $selected_state_id = null;
    if ($district) {
        $selected_district = entity_load("itonics_nabin_district", $district);

        if ($selected_district) {
            $selected_state_id  = $selected_district->state_id;
        }
    }

    foreach ($records as $record) {
        $states[$record->state_id] = $record->state_name;
    }

    return [
        'selected' => $selected_state_id,
        'states' => $states
    ];
}

/**
 * @param $state
 * @return array
 * @throws EntityMalformedException
 */
function _itonics_nabin_ajax_get_districts($state = ''): array
{
    if (empty($state)) {
        return [];
    }

    $results = entity_get_controller("itonics_nabin_district")->getByStateId($state);
    $regions = [];
    foreach ($results as $result) {
        $regions[$result->district_id] = $result->district_name;
    }
    return $regions;
}

/**
 * @param $teacher
 * @return array
 * @throws Exception
 */
function itonics_nabin_teacher_view($teacher): array
{
    global $genders, $job_types;

    if (!$teacher) {
        return drupal_not_found();
    }
    $profile_picture = null;
    if (!empty($teacher->profile_picture)) {
        $file = file_load($teacher->profile_picture);

        if ($file) {
            $profile_picture = theme('image_style', [
                'style_name' => 'thumbnail',
                'path' => $file->uri,
                'alt' => $teacher->first_name,
                'title' => $teacher->first_name,
            ]);
        }
    }
    $full_name = $teacher->first_name . ' ' . $teacher->last_name;

    $teacher_view = [
        'name' => [
            '#markup' => '<h1>' . check_plain($full_name) . '</h1>',
        ],
        'details' => [
            '#theme' => 'table',
            '#rows' => [
                [
                    [
                        'data' => 'First Name',
                        'header' => TRUE,
                    ],
                    check_plain($teacher->first_name),
                ],
                [
                    [
                        'data' => 'Last Name',
                        'header' => TRUE,
                    ],
                    check_plain($teacher->last_name),
                ],
                [
                    [
                        'data' => 'Gender',
                        'header' => TRUE,
                    ],
                    check_plain($teacher->gender ? $genders[$teacher->gender] : ''),
                ],
                [
                    [
                        'data' => 'Job Type',
                        'header' => TRUE,
                    ],
                    @unserialize($teacher->job_type),
                ],
                [
                    [
                        'data' => 'Join Date',
                        'header' => TRUE,
                    ],
                    format_date($teacher->join_date, 'long'),
                ],
            ],
        ],
    ];

    if (!empty($profile_picture)) {
        $teacher_view['profile_picture'] = [
            '#markup' => $profile_picture,
        ];
    }
    $teacher_view['description'] = [
        '#markup' => '<h2>' . t('Description') . '</h2><div class="teacher-description">' . check_markup($teacher->description, 'full_html') . '</div>',
    ];

    $markup = '<div class="actions">';
    if (user_access('edit teacher')) {
        $markup .= l(t('Edit'), 'admin/itonics-nabin-teacher/edit/' . $teacher->teacher_id);
    }
    if (user_access('delete teacher')) {
        $markup .= ' | ' . l(t('Delete'), 'admin/itonics-nabin-teacher/delete/' . $teacher->teacher_id) . ' | ';
    }

    $markup .= l(t('Back to list'), 'admin/itonics-nabin-teacher'). '</div>';
    $teacher_view['actions'] = [
        '#markup' => $markup,
    ];

    return $teacher_view;
}

/**
 * @param $form
 * @param $form_state
 * @param $teacher
 * @return array[]
 * @throws EntityMalformedException
 */
function itonics_nabin_teacher_form($form, &$form_state, $teacher = NULL): array
{
    global $genders, $job_types;
    $form = [];

    if ($teacher) {
        if (!empty($teacher->profile_picture)) {
            $form_state['storage']['old_image'] = $teacher->profile_picture;
        }
    }

    $get_state_options = _itonics_nabin_ajax_get_states(isset($teacher) ? $teacher->region_id ?? NULL : null);
    $state_options = $get_state_options['states'] ?? [];
    $selected_state = $form_state['values']['state'] ?? key($state_options);

    $form_state["entity"] = $teacher;
    $form = [
        'first_name' => [
            '#type' => 'textfield',
            '#title' => 'First Name',
            '#prefix' => '<div id="first-name-wrapper">',
            '#suffix' => '</div>',
            '#default_value' => !empty($teacher) ? $teacher->first_name : '',
        ],
        'last_name' => [
            '#type' => 'textfield',
            '#title' => 'Last Name',
            '#prefix' => '<div id="last-name-wrapper">',
            '#suffix' => '</div>',
            '#default_value' => !empty($teacher) ? $teacher->last_name : '',
        ],
        'gender' => [
            '#type' => 'radios',
            '#title' => 'Gender',
            '#options' => $genders,
            '#prefix' => '<div id="gender-wrapper">',
            '#suffix' => '</div>',
            '#default_value' => !empty($teacher) ? $teacher->gender : '',
        ],
        'job_type' => [
            '#type' => 'checkboxes',
            '#title' => 'Job Type',
            '#options' => $job_types,
            '#prefix' => '<div id="job-type-wrapper">',
            '#suffix' => '</div>',
            '#default_value' => !empty($teacher) ? @unserialize($teacher->job_type) : [],
        ],
        'profile_picture' => [
            '#type' => 'managed_file',
            '#title' => 'Profile Picture',
            '#required' => TRUE,
            '#default_value' => !empty($teacher) ? $teacher->profile_picture : NULL,
            '#upload_location' => 'public://profile_pictures/',
            '#upload_validators' => [
                'file_validate_extensions' => ['png jpg jpeg'],
            ],
            '#prefix' => '<div id="profile-picture-wrapper">',
            '#suffix' => '</div>',
        ],
        'state' => [
            '#type' => 'select',
            '#title' => 'State',
            '#default_value' => $selected_state,
            '#options' => $state_options,
            '#ajax' => [
                'callback' => 'itonics_nabin_ajax_get_districts_callback',
                'wrapper' => 'districts-dropdown-wrapper',
            ],
        ],
        'region_id' => [
            '#type' => 'select',
            '#title' => $state_options[$selected_state] . ' Regions',
            '#prefix' => '<div id="districts-dropdown-wrapper">',
            '#suffix' => '</div>',
            '#options' => _itonics_nabin_ajax_get_districts($selected_state),
            '#default_value' => !empty($teacher) ? $teacher->region_id ?? '' : '',
        ],
        'join_date' => [
            '#type' => 'date_popup',
            '#title' => 'Join Date',
            '#date_format' => 'Y-m-d',
            '#default_value' => !empty($teacher) ? format_date($teacher->join_date, 'custom', 'Y-m-d') : NULL,
            '#prefix' => '<div id="join-date-wrapper">',
            '#suffix' => '</div>',
        ],
        'description' => [
            '#type' => 'text_format',
            '#title' => 'Description',
            '#format' => 'filtered_html',
            '#default_value' => !empty($teacher) ? $teacher->description : NULL,
            '#required' => FALSE,
        ],
        'submit' => [
            '#type' => 'submit',
            '#value' => 'Submit',
            '#ajax' => [
                'callback' => 'itonics_nabin_teacher_ajax_form_submit_callback',
                'wrapper' => 'itonics-nabin-teacher-form-wrapper',
            ]
        ],
        'teacher_id' => [
            '#type' => 'value',
            '#value' => !empty($teacher) ? $teacher->teacher_id : NULL,
        ],
        'entity' => [
            '#type' => 'value',
            '#value' => $teacher
        ]
    ];

    return $form;
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function itonics_nabin_ajax_get_districts_callback($form, $form_state): mixed
{
    return $form['region_id'];
}

/**
 * @param $form
 * @param $form_state
 * @return array
 */
function itonics_nabin_teacher_ajax_form_submit_callback($form, &$form_state): array
{
    $commands = [];
    $values = $form_state['values'];

    $has_error = FALSE;
    $fields = [
        'first_name' => [
            'wrapper' => '#first-name-wrapper',
            'selector' => '#edit-first_name',
            'message' => '<div class="custom-error" >First name is required.</div>',
        ],
        'last_name' => [
            'wrapper' => '#last-name-wrapper',
            'selector' => '#edit-last_name',
            'message' => '<div class="custom-error" >Last name is required.</div>',
        ],
        'gender' => [
            'wrapper' => '#gender-wrapper',
            'selector' => 'input[name="gender"]',
            'message' => '<div class="custom-error" >Gender is required.</div>',
        ],
        'job_type' => [
            'wrapper' => '#job-type-wrapper',
            'selector' => 'input[name="job_type"]',
            'message' => '<div class="custom-error" >Job Type is required.</div>',
        ],
        'join_date' => [
            'wrapper' => '#join-date-wrapper',
            'selector' => '#edit-join_date',
            'message' => '<div class="custom-error" >Join Date is required.</div>',
        ],
//        'profile_picture' => [
//            'wrapper' => '#profile-picture-wrapper',
//            'selector' => '#edit-profile-picture',
//            'message' => '<div class="custom-error" >Profile Picture is required.</div>',
//        ],
    ];

    foreach ($fields as $key => $field) {
        itonics_nabin_teacher_form_error_ajax_commands($commands, $field['wrapper'], NULL, $field['selector'], FALSE);
        if (empty($values[$key])) {
            $has_error = TRUE;
            itonics_nabin_teacher_form_error_ajax_commands($commands, $field['wrapper'], $field['message'], $field['selector']);
        }
    }

    if (!$has_error) {
        store_or_update_teacher($form, $form_state);
    }

    return $has_error ? [
        '#type' => 'ajax',
        '#commands' => $commands,
    ] : [
        '#type' => 'ajax',
        '#commands' => [
            ajax_command_invoke(NULL, 'teacherRedirect', [
                url('admin/itonics-nabin-teachers', [
                    'absolute' => TRUE,
                ]),
            ])
        ],
        '#attached' => [
            'js' => [
                drupal_get_path('module/custom', 'itonics_nabin_teacher') . '/teacher.ajax.js',
            ],
        ],
    ];
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function store_or_update_teacher($form, &$form_state): mixed
{
    $values = $form_state['values'];
    $entity = $values['entity'] ?? NULL;
    $file = file_load($values['profile_picture']);

    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'itonics_nabin_teacher', 'teacher_information', isset($values['teacher_id']) ? $values['teacher_id'] : 0);
    $profile_picture_id = $file->fid;

    $fields = [
        'first_name' => $values['first_name'],
        'last_name' => $values['last_name'],
        'gender' => $values['gender'],
        'region_id' => $values['region_id'],
        'profile_picture' => $profile_picture_id,
        'description' => $values['description']['value'],
        'job_type' => isset($values['job_type']) ? serialize($values['job_type']) : NULL,
        'join_date' => strtotime($values['join_date']),
        'updated' => REQUEST_TIME,
    ];

    // trigger hook to modify data
    drupal_alter('itonics_nabin_faculty_teacher_data', $fields, $form_state);

    foreach ($fields as $key => $field) {
        $entity->{$key} = $field;
    }

    if (empty($values['teacher_id'])) {
        $entity->created = REQUEST_TIME;
        entity_save("itonics_nabin_teacher", $entity);
        drupal_set_message('Teacher created successfully.');
    } else {
        entity_save("itonics_nabin_teacher", $entity);
        if (!empty($form_state['storage']['old_image'])) {
            $old_file = file_load($form_state['storage']['old_image']);
            file_usage_delete($old_file, 'itonics_nabin_teacher', 'teacher_information', $values['teacher_id']);
            file_delete($old_file);
        }
        drupal_set_message('Teacher updated successfully.');
    }

    $form_state['redirect'] = 'admin/itonics-nabin-teachers';
    return $form;
}

/**
 * @param $form
 * @param $form_state
 * @param $teacher
 * @return array
 */
function itonics_nabin_teacher_delete_form($form, &$form_state, $teacher): array
{
    $form['teacher'] = [
        '#type' => 'value',
        '#value' => $teacher,
    ];

    return confirm_form(
        form: $form,
        question: t('Are you sure you want to delete this teacher?'),
        path: 'admin/itonics-nabin-teacher',
        description: t('This action cannot be undone.'),
        yes: t('Delete'),
        no: t('Cancel')
    );
}

/**
 * @param $form
 * @param $form_state
 * @return void
 */
function itonics_nabin_teacher_delete_form_submit($form, &$form_state): void
{
    $teacher = $form_state['values']['teacher'];

    if (!empty($teacher->profile_picture)) {
        $file = file_load($teacher->profile_picture);
        if ($file) {
            file_usage_delete($file, 'itonics_nabin_teacher', 'teacher_information', $teacher->teacher_id);
            file_delete($file);
        }
    }

    entity_delete("itonics_nabin_teacher", $teacher->teacher_id);

    drupal_set_message('Teacher deleted');
    $form_state['redirect'] = 'admin/itonics-nabin-teachers';
}


/**
 * @param array $commands
 * @param $wrapper_id
 * @param $error_message
 * @param $field_selector
 * @param $add_class
 * @return void
 */
function itonics_nabin_teacher_form_error_ajax_commands(array &$commands, $wrapper_id, $error_message = NULL, $field_selector = '', $add_class = TRUE) {
    $commands[] = ajax_command_invoke($wrapper_id . ' .custom-error', 'remove');
    if ($error_message !== NULL) {
        $commands[] = ajax_command_invoke($wrapper_id, 'prepend', [$error_message]);
    }

    if ($field_selector) {
        if ($add_class) {
            $commands[] = ajax_command_invoke($field_selector, 'addClass', ['error']);
        } else {
            $commands[] = ajax_command_invoke($field_selector, 'removeClass', ['error']);
        }
    }
}
