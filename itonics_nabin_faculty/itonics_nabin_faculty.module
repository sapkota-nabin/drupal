<?php

module_load_include("php", "itonics_nabin_faculty", "src/Controllers/ItonicsNabinFacultyController");
module_load_include("php", "itonics_nabin_faculty", "src/Entities/ItonicsNabinFacultyEntity");

/**
 * Implements hook_entity_info().
 */
function itonics_nabin_faculty_entity_info(): array
{
    $info["itonics_nabin_faculty"] = [
        "label" => "Itonics Nabin Faculty",
        "controller class" => "ItonicsNabinFacultyController",
        "entity class" => "ItonicsNabinFacultyEntity",
        "base table" => "itonics_nabin_faculty",
        "fieldable" => TRUE,
        "entity keys" => [
            "id" => "faculty_id",
            "label" => "name",
        ],
        "static cache" => TRUE,
    ];

    return $info;
}

/**
 * @return array
 */
function itonics_nabin_faculty_menu() {
    $menus = [];

    $menus['admin/itonics-nabin-faculty'] = [
        'title' => 'ITONICS FACULTIES',
        'description' => 'List all faculty',
        'page callback' => 'itonics_nabin_faculty_list_page',
        'access arguments' => ['view faculty'],
        'type' => MENU_NORMAL_ITEM
    ];

    $menus['admin/itonics-nabin-faculty/add'] = [
        'title' => 'Add faculty',
        'description' => 'Add faculty',
        'page callback' => 'itonics_nabin_faculty_add',
        'access arguments' => ['add faculty'],
        'type' => MENU_CALLBACK,
    ];

    $menus['admin/itonics-nabin-faculty/edit/%itonics_nabin_faculty'] = [
        'title' => 'Edit faculty',
        'description' => 'Edit faculty',
        'page callback' => 'itonics_nabin_faculty_update_form',
        'page arguments' => [3],
        'access arguments' => ['edit faculty'],
        'type' => MENU_CALLBACK,
    ];

    $menus['admin/itonics-nabin-faculty/delete/%itonics_nabin_faculty'] = [
        'title' => 'Delete faculty',
        'description' => 'Delete faculty',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['itonics_nabin_faculty_delete_form', 3],
        'access arguments' => ['delete faculty'],
        'type' => MENU_CALLBACK,
    ];

//    $menus['admin/itonics-nabin-faculty/view/%'] = [
//        'title' => 'View faculty',
//        'description' => 'View faculty',
//        'page callback' => 'itonics_nabin_faculty_view',
//        'page arguments' => [3],
//        'access arguments' => ['view faculty'],
//        'type' => MENU_CALLBACK,
//    ];

    return $menus;
}

function itonics_nabin_faculty_add() {
    $faculty = entity_get_controller("itonics_nabin_faculty")->getNewFaculty();
    return drupal_get_form("itonics_nabin_faculty_form_classic", $faculty);
//    itonics_nabin_faculty_form($faculty);
}

/**
 * @param $faculty_id
 * @param $reset
 * @return mixed
 */
function itonics_nabin_faculty_load($faculty_id = NULL, $reset = FALSE): mixed
{
    $faculty_ids = isset($faculty_id) ? [$faculty_id] : [];
    $faculty = entity_load("itonics_nabin_faculty", $faculty_ids, [], $reset);
    return $faculty ? reset($faculty) : FALSE;
}

/**
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array[]
 */
function itonics_nabin_faculty_theme($existing, $type, $theme, $path)
{
    return [
        "faculty_list" => [
            "variables" => [
                "rows" => [],
                'can_add' => FALSE,
                'add_link' => '',
            ],
            "template" => "faculty-list",
            "path" => drupal_get_path("module", "itonics_nabin_faculty") . "/templates",
        ],
    ];
}


// PERMISSIONS
/**
 * @return array[]
 */
function itonics_nabin_faculty_permission() {
    return [
        'view faculty' => [
            'title' => 'View faculties',
            'description' => 'View list of faculties.',
        ],
        'add new faculty' => [
            'title' => 'Add faculty',
            'description' => 'Add faculty',
        ],
        'edit faculty' => [
            'title' => 'Edit faculty',
            'description' => 'Update the faculty data',
        ],
        'delete faculty' => [
            'title' => 'Delete faculty',
            'description' => 'Delete the selected faculty.',
        ],
    ];
}

function get_all_faculties_query($headers = [], $pagination = FALSE, $order = FALSE, $limit = 0, $sort = FALSE, $fields = []) {
    $query = db_select('itonics_nabin_faculty', 'f');
    if ($pagination) {
        $query->extend("PagerDefault");
    }
    if ($sort) {
        $query->extend("TableSort");
    }
    if ($order && count($headers)) {
        $query->orderByHeader($headers);
    }
    if ($limit > 0) {
        $query->limit($limit);
    }
    return $query->fields(count($fields) ? $fields : 'f')->execute();
}

function itonics_nabin_faculty_itonics_nabin_student_insert($student) {
//    var_dump($student);
    // Here we get the recently created (INSERTED) student object
    // which we can use extract the faculty id from the student
    // and process it further
}

function array_find_first(array $array, string|int $field, mixed $value): array|object|null
{
    $filtered = array_filter($array, function($item) use ($field, $value) {
        if (is_array($item)) {
            return isset($item[$field]) && $item[$field] === $value;
        } elseif (is_object($item)) {
            return property_exists($item, $field) && $item->$field === $value;
        }
    });
    return reset($filtered) ?: null;
}


function itonics_nabin_faculty_itonics_nabin_students_list($alter) {
    $rows = $alter["rows"];
    $headers = $alter["headers"];
    $query_results = $alter["data"];
    $headers["faculty_id"] = [
            "data" => "Faculty",
            "field" => "faculty_id",
    ];
    $alteredRows = [];
    foreach ($rows as $row) {
        $queryResult = array_find_first($query_results, "student_id", $row["student_id"]);

        $facultyId = $queryResult->faculty_id ?? null;
        $faculty = null;
        if ($facultyId) {
            $faculty = entity_load("itonics_nabin_faculty", $facultyId);
        }
        $row["faculty_id"] = $faculty ? $faculty->name : NULL;
        $alteredRows[] = $row;
    }

    $alter["rows"] = $alteredRows;
    $alter["headers"] = $headers;

    return $alter;
}

function get_faculty_for_form_element() {
    $faculties = get_all_faculties_query();
    $faculty_options = [];
    foreach ($faculties as $faculty) {
        $faculty_options[$faculty->faculty_id] = $faculty->name;
    }

    return $faculty_options;
}

function itonics_nabin_faculty_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id === 'itonics_nabin_student_form') {
        $faculty_options = get_faculty_for_form_element();

        $form['faculty_id'] = [
            '#type' => 'select',
            '#title' => 'Select Faculty',
            '#options' => $faculty_options,
            '#default_value' => !empty($form_state["student"]) ? $form_state["student"]->faculty_id : NULL,
            '#prefix' => '<div id="student-faculty-code-wrapper">',
            '#suffix' => '</div>',
            '#weight' => 0,
        ];
    }

    if ($form_id === 'itonics_nabin_teacher_form') {
        $faculty_options = get_faculty_for_form_element();
        $form['faculties'] = [
            '#type' => 'checkboxes',
            '#title' => 'Faculties',
            '#options' => $faculty_options,
            '#prefix' => '<div id="teacher-faculties-checkbox-wrapper">',
            '#suffix' => '</div>',
            '#default_value' => !empty($form_state["entity"]) ? @unserialize($form_state["entity"]->faculties) : [],
            '#weight' => 0,
        ];
    }
}

function itonics_nabin_faculty_form_itonics_nabin_student_alter(&$form, &$form_state) {
    var_dump($form);
    var_dump($form_state);
}


function itonics_nabin_faculty_itonics_nabin_faculty_message_alter(&$message) {
    $message = "Student Faculty information has been added successfully.";
}

function itonics_nabin_faculty_itonics_nabin_faculty_student_data_alter(&$fields, &$form_state): void
{
    $fields['faculty_id'] = $form_state['values']['faculty_id'];
}

function itonics_nabin_faculty_itonics_nabin_faculty_teacher_data_alter(&$fields, &$form_state): void
{
    $fields['faculties'] = isset($form_state['values']['faculties'])
        ? serialize($form_state['values']['faculties'])
        : NULL;
}

function itonics_nabin_faculty_itonics_nabin_student_entity_default_values_alter(&$entity_default_data): void
{
    $entity_default_data["faculty_id"] = 0;
}

function itonics_nabin_faculty_list_page() {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();
    $faculty_list = entity_get_controller("itonics_nabin_faculty")->getFormattedListData();

    return theme('faculty_list', $faculty_list);
}

/**
 * Implements hook_form().
 */
function itonics_nabin_faculty_update_form($faculty_id) {
    itonics_nabin_faculty_form($faculty_id);
}

function itonics_nabin_faculty_form_classic($form, &$form_state, $faculty = null): array
{
    $form = [];
    $form_state['faculty'] = $faculty;
    $form = [
        'name' => [
            '#type' => 'textfield',
            '#title' => 'Name',
            '#required' => TRUE,
            '#default_value' => !empty($faculty) ? $faculty->name : '',
            '#prefix' => '<div id="faculty-name-wrapper">',
            '#suffix' => '</div>',
            '#weight' => 1,
        ],
        'code' => [
            '#type' => 'textfield',
            '#title' => 'Code',
            '#required' => TRUE,
            '#default_value' => !empty($faculty) ? $faculty->code : '',
            '#prefix' => '<div id="faculty-code-wrapper">',
            '#suffix' => '</div>',
            '#weight' => 2,
        ],
        'description' => [
            '#type' => 'text_format',
            '#title' => 'Description',
            '#format' => 'filtered_html',
            '#default_value' => !empty($faculty) ? $faculty->description : NULL,
            '#required' => FALSE,
            '#weight' => 3,
        ],
        'submit' => [
            '#type' => 'submit',
            '#title' => 'Submit',
            '#value' => 'Submit',
            '#ajax' => [
                'callback' => 'itonics_nabin_faculty_ajax_form_submit_callback',
                'wrapper' => 'itonics-nabin-faculty-form-wrapper',
            ],
            '#weight' => 4,
        ],
        'faculty_id' => [
            '#type' => 'value',
            '#value' => !empty($faculty) ? $faculty->faculty_id : NULL,
        ],
    ];

    field_attach_form("itonics_nabin_faculty", $faculty, $form, $form_state);
    return $form;
}

function itonics_nabin_faculty_form($faculty) {
    ctools_include('modal');
    ctools_include('ajax');
//    drupal_add_library('file', 'drupal.file');
//    drupal_add_library('file', 'drupal.file.progress');
//    drupal_add_library('file', 'drupal.file.preview');
    $form_path = $faculty->faculty_id ?? "add";
    $form_info = array(
        'id' => "itonics_nabin_faculty_start_{$form_path}",
        'path' => "itonics-nabin-faculty/{$form_path}/%step",
        'show trail' => TRUE,
        'show back' => TRUE,
        'show cancel' => TRUE,
        'show return' => FALSE,
        'order' => array(
            'start' => t('Choose faculty'),
        ),
        'forms' => array(
            'start' => array(
                'form id' => "itonics_nabin_faculty_start_{$form_path}",
            ),
        ),
    );

    $form_state['form_info'] = $form_info;
    $form_state['faculty_id'] = $faculty->faculty_id;
    $form_state["faculty"] = $faculty;
    ctools_include('wizard');
    ctools_add_js('ajax-responder');
//    $form['#attributes']['enctype'] = 'multipart/form-data';
//    $form['#attributes']['class'][] = 'ctools-use-modal';
    $form = drupal_build_form('itonics_nabin_faculty_start', $form_state);
    field_attach_form("itonics_nabin_faculty", $faculty, $form, $form_state);
    ctools_modal_add_js();
    $output = drupal_render($form);
    $commands = ctools_modal_form_render($form_state, $output);
    print ajax_render($commands);
    exit;
}

function itonics_nabin_faculty_start($form, &$form_state) {
    $faculty = $form_state["faculty"] ?? NULL;

    return [
        'name' => [
            '#type' => 'textfield',
            '#title' => 'Name',
            '#required' => TRUE,
            '#default_value' => !empty($faculty) ? $faculty->name : '',
            '#prefix' => '<div id="faculty-name-wrapper">',
            '#suffix' => '</div>',
            '#weight' => 1,
        ],
        'code' => [
            '#type' => 'textfield',
            '#title' => 'Code',
            '#required' => TRUE,
            '#default_value' => !empty($faculty) ? $faculty->code : '',
            '#prefix' => '<div id="faculty-code-wrapper">',
            '#suffix' => '</div>',
            '#weight' => 2,
        ],
        'description' => [
            '#type' => 'text_format',
            '#title' => 'Description',
            '#format' => 'filtered_html',
            '#default_value' => !empty($faculty) ? $faculty->description : NULL,
            '#required' => FALSE,
            '#weight' => 3,
        ],
        'submit' => [
            '#type' => 'submit',
            '#title' => 'Submit',
            '#value' => 'Submit',
            '#ajax' => [
                'callback' => 'itonics_nabin_faculty_ajax_form_submit_callback',
                'wrapper' => 'itonics-nabin-faculty-form-wrapper',
            ],
            '#weight' => 4,
        ],
        'faculty_id' => [
            '#type' => 'value',
            '#value' => !empty($faculty) ? $faculty->faculty_id : NULL,
        ],
    ];
}


function itonics_nabin_faculty_ajax_form_submit_callback($form, &$form_state) {
    $commands = [];
    $values = $form_state['values'];

    $has_error = FALSE;
    $fields = [
        'name' => [
            'wrapper' => '#faculty-name-wrapper',
            'selector' => '#edit-name',
            'message' => '<div class="custom-error">Faculty name is required.</div>',
        ],
        'code' => [
            'wrapper' => '#faculty-code-wrapper',
            'selector' => '#edit-code',
            'message' => '<div class="custom-error" >Faculty code is required.</div>',
        ],
    ];

    foreach ($fields as $key => $field) {
        itonics_nabin_teacher_form_error_ajax_commands($commands, $field['wrapper'], NULL, $field['selector'], FALSE);
        if (empty($values[$key])) {
            $has_error = TRUE;
            itonics_nabin_teacher_form_error_ajax_commands($commands, $field['wrapper'], $field['message'], $field['selector']);
        }
    }

    // validate if the code is unique in database
    $code_exists = fetch_faculty($values['code'], 'code');
    if ($code_exists && $code_exists->faculty_id != $values['faculty_id']) {
        $has_error = TRUE;
        itonics_nabin_teacher_form_error_ajax_commands($commands, $field['wrapper'], '<div class="custom-error" >Faculty code is already taken.</div>', $field['selector'], FALSE);
    }
    if (!$has_error) {
        store_or_update_faculty($form, $form_state);
    }
//    $commands[] = ajax_command_invoke(NULL, 'fileUploadAutoAttach');

    return $has_error ? [
        '#type' => 'ajax',
        '#commands' => $commands,
    ] : [
        '#type' => 'ajax',
        '#commands' => [
            [
                'command' => 'modal_dismiss',
            ],
            [
                'command' => 'reload'
            ],
        ],
    ];
}

function fetch_faculty($value, $field = 'faculty_id') {
    return db_select('itonics_nabin_faculty', 'f')
        ->fields('f')
        ->condition($field, $value)
        ->execute()
        ->fetchObject();
}

function store_or_update_faculty($form, &$form_state) {
    $values = $form_state['values'];
    $fields = [
        'name' => $values['name'],
        'code' => $values['code'],
        'description' => $values['description']['value'],
    ];

    $faculty = $form_state["faculty"];

    foreach ($fields as $key => $value) {
        $faculty->{$key} = $value;
    }
    $faculty->faculty_image = $values['faculty_image'] ?? null;

    if (empty($values['faculty_id'])) {
//        $fields['created'] = REQUEST_TIME;
        $faculty->created = REQUEST_TIME;
        entity_save("itonics_nabin_faculty", $faculty);
        field_attach_submit("itonics_nabin_faculty", $faculty, $form, $form_state);
//        drupal_write_record('itonics_nabin_faculty', $fields);
        drupal_set_message('Faculty created successfully.');
    } else {
        $fields['faculty_id'] = $values['faculty_id'];
        entity_save("itonics_nabin_faculty", $faculty);
        field_attach_submit("itonics_nabin_faculty", $faculty, $form, $form_state);
//        drupal_write_record('itonics_nabin_faculty', $fields, 'faculty_id');
        drupal_set_message('Faculty updated successfully.');
    }
}

function itonics_nabin_faculty_delete_form($form, &$form_state, $faculty) {
    $form['faculty'] = [
        '#type' => 'value',
        '#value' => $faculty,
    ];

    return confirm_form(
        form: $form,
        question: t('Are you sure you want to delete this faculty?'),
        path: 'admin/itonics-nabin-faculty',
        description: t('This action cannot be undone.'),
        yes: t('Delete'),
        no: t('Cancel')
    );
}

function itonics_nabin_faculty_delete_form_submit($form, &$form_state) {
    $faculty = $form_state['values']['faculty'];

//    db_delete('itonics_nabin_faculty')
//        ->condition('faculty_id', $faculty_id)
//        ->execute();
    entity_delete("itonics_nabin_faculty", $faculty->faculty_id);

    drupal_set_message('Faculty deleted');
    $form_state['redirect'] = 'admin/itonics-nabin-faculty';
}
