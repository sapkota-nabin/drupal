<?php
/**
 * @file
 * A custom module for adding functionality to Drupa
 */
global  $genders, $grades;

$genders = [
    'M' => 'Male',
    'F' => 'Female',
    'O' => 'Other'
];

$grades = [
    'A' => 'A',
    'B' => 'B',
    'C' => 'C',
    'D' => 'D',
];
function itonics_nabin_student_menu() {
    $menus = [];

    $menus['admin/itonics-nabin-student'] = [
        'title' => 'ITONICS STUDENTS',
        'description' => 'List all students',
        'page callback' => 'itonics_nabin_students_list',
        'access arguments' => ['view students'],
        'type' => MENU_NORMAL_ITEM
    ];

    $menus['admin/itonics-nabin-student/add'] = [
        'title' => 'Add Student',
        'description' => 'Add Student',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['itonics_nabin_student_form'],
        'access arguments' => ['add new student'],
        'type' => MENU_NORMAL_ITEM,
    ];

    $menus['admin/itonics-nabin-student/edit/%'] = [
        'title' => 'Edit Student',
        'description' => 'Edit student',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['itonics_nabin_student_form', 3],
        'access arguments' => ['edit student'],
        'type' => MENU_CALLBACK,
    ];

    $menus['admin/itonics-nabin-student/delete/%'] = [
        'title' => 'Delete Student',
        'description' => 'Delete student',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['itonics_nabin_student_delete_form', 3],
        'access arguments' => ['delete student'],
        'type' => MENU_CALLBACK,
    ];

    $menus['admin/itonics-nabin-student/view/%'] = [
        'title' => 'View Student',
        'description' => 'View Student',
        'page callback' => 'itonics_nabin_student_view',
        'page arguments' => [3],
        'access arguments' => ['view students'],
        'type' => MENU_CALLBACK,
    ];

    return $menus;
}

// PERMISSIONS
function itonics_nabin_student_permission() {
    return [
        'view students' => [
            'title' => 'View Students',
            'description' => 'View list of students.',
        ],
        'add new student' => [
            'title' => 'Add Student',
            'description' => 'Add student',
        ],
        'edit student' => [
            'title' => 'Edit Student',
            'description' => 'Update the student data',
        ],
        'delete student' => [
            'title' => 'Delete Student',
            'description' => 'Delete the selected student.',
        ],
    ];
}

function itonics_nabin_students_list() {
    global $genders, $grades;

    $headers = [
        'profile_picture' => [
            'data' => 'Profile Picture',
            'field' => 'profile_picture',
        ],
        'first_name' => [
            'data' => 'First Name',
            'field' => 'first_name',
            'sort' => 'asc',
        ],
        'last_name' => [
            'data' => 'Last Name',
            'field' => 'last_name',
        ],
        'gender' => [
            'data' => 'Gender',
            'field' => 'gender',
        ],
        'grade' => [
            'data' => "Grade",
            'field' => 'grade',
        ],
        'admission_date' => [
            'data' => "Admission Date",
            'field' => 'admission_date',
        ],
        'actions' => [
            'data' => "Actions",
        ],
    ];

    $rows = [];

    $results = db_select('itonics_nabin_student_information', 'p')
        ->extend('PagerDefault')
        ->extend('TableSort')
        ->fields('p')
        ->limit(10)
        ->orderByHeader($headers)
        ->execute();

    $can_edit = user_access('edit students');
    $can_delete = user_access('delete students');
    $can_add = user_access('add students');

    foreach ($results as $row) {
        $image = '';
        if (!empty($row->profile_picture)) {
            $file = file_load($row->profile_picture);
            if ($file) {
                $image = theme('image_style', [
                    'style_name' => 'thumbnail',
                    'path' => $file->uri,
                    'alt' => $row->first_name,
                    'title' => $row->first_name,
                ]);
            }
        }

        $student_row = [
            'profile_picture' => $image,
            'first_name' => check_plain($row->first_name),
            'last_name' => check_plain($row->last_name),
            'gender' => $row->gender ? $genders[$row->gender] : null,
            'grade' => $row->grade ? $grades[$row->grade] : null,
            'admission_date' => format_date(strtotime($row->admission_date), 'custom', 'Y-m-d'),
            'actions' => [
                'data' => [
                    '#theme' => 'links',
                    '#links' => [
                        'view' => [
                            'title' => 'View',
                            'href' => 'admin/itonics-nabin-student/view/' . $row->student_id,
                        ],
                    ],
                    '#attributes' => [
                        'class' => ['links', 'inline'],
                    ],
                ],
            ],
        ];
        if ($can_edit) {
            $student_row['actions']['data']['#links']['edit'] = [
                'title' => 'Edit',
                'href' => 'admin/itonics-nabin-student/edit/' .  $row->student_id,
            ];
        }
        if ($can_delete) {
            $student_row['actions']['data']['#links']['delete'] = [
                'title' => 'Delete',
                'href' => 'admin/itonics-nabin-student/delete/' . $row->student_id,
            ];
        }
        $rows[] = $student_row;
    }

    $build['students_table'] = [
        '#theme' => 'table',
        '#header' => $headers,
        '#rows' => $rows,
        '#empty' => 'No students',
    ];
    $build['pager'] = [
        '#theme' => 'pager',
    ];

    if ($can_add) {
        $build['add_link'] = [
            '#markup' => l('Add Student', 'admin/itonics-nabin-student/add'),
        ];
    }

    return $build;
}

function fetch_student($student_id) {
    return db_select('itonics_nabin_student_information', 'p')
        ->fields('p')
        ->condition('student_id', $student_id)
        ->execute()
        ->fetchObject();
}

function itonics_nabin_student_view($student_id) {
    global $genders, $grades;
    $student = fetch_student($student_id);

    if (!$student) {
        return drupal_not_found();
    }
    $profile_picture = null;
    if (!empty($student->profile_picture)) {
        $file = file_load($student->profile_picture);

        if ($file) {
            $profile_picture = theme('image_style', [
                'style_name' => 'thumbnail',
                'path' => $file->uri,
                'alt' => $student->first_name,
                'title' => $student->first_name,
            ]);
        }
    }
    $full_name = $student->first_name . ' ' . $student->last_name;
    $student_view = [
        'name' => [
            '#markup' => '<h1>' . check_plain($full_name) . '</h1>',
        ],
        'details' => [
            '#theme' => 'table',
            '#rows' => [
                [
                    [
                        'data' => 'First Name',
                        'header' => TRUE,
                    ],
                    check_plain($student->first_name),
                ],
                [
                    [
                        'data' => 'Last Name',
                        'header' => TRUE,
                    ],
                    check_plain($student->last_name),
                ],
                [
                    [
                        'data' => 'Gender',
                        'header' => TRUE,
                    ],
                    check_plain($student->gender ? $genders[$student->gender] : null),
                ],
                [
                    [
                        'data' => 'Grade',
                        'header' => TRUE,
                    ],
                    check_plain($student->grade ? $grades[$student->grade] : null),
                ],
                [
                    [
                        'data' => 'Admission Date',
                        'header' => TRUE,
                    ],
                    format_date(strtotime($student->admission_date), 'long'),
                ],
            ],
        ],
    ];

    if (!empty($profile_picture)) {
        $student_view['profile_picture'] = [
            '#markup' => $profile_picture,
        ];
    }
    $student_view['description'] = [
        '#markup' => '<h2>' . t('Description') . '</h2><div class="teacher-description">' . check_markup($student->description, 'full_html') . '</div>',
    ];

    $markup = '<div class="actions">';
    if (user_access('edit student')) {
        $markup .= l(t('Edit'), 'admin/itonics-nabin-student/edit/' . $student_id);
    }
    if (user_access('delete student')) {
        $markup .= ' | ' . l(t('Delete'), 'admin/itonics-nabin-student/delete/' . $student_id) . ' | ';
    }

    $markup .= l(t('Back to list'), 'admin/itonics-nabin-student'). '</div>';
    $student_view['actions'] = [
        '#markup' => $markup,
    ];

    return $student_view;
}

function itonics_nabin_student_form($form, &$form_state, $student_id = null) {
    global $genders, $grades;
    $form = [];

    $student = null;

    if ($student_id) {
        $student = fetch_student($student_id);

        if (!empty($student->profile_picture)) {
            $form_state['storage']['old_image'] = $student->profile_picture;
        }
    }

    $form = [
        'first_name' => [
            '#type' => 'textfield',
            '#title' => 'First Name',
            '#required' => TRUE,
            '#default_value' => !empty($student) ? $student->first_name : '',
        ],
        'last_name' => [
            '#type' => 'textfield',
            '#title' => 'Last Name',
            '#required' => TRUE,
            '#default_value' => !empty($student) ? $student->last_name : '',
        ],
        'gender' => [
            '#type' => 'radios',
            '#title' => 'Gender',
            '#options' => $genders,
            '#required' => TRUE,
            '#default_value' => !empty($student) ? ($student->gender ? $genders[$student->gender] : '') : '',
        ],
        'grade' => [
            '#type' => 'radios',
            '#title' => 'Grade',
            '#options' => $grades,
            '#required' => TRUE,
            '#default_value' => !empty($student) ? ($student->grade ? $grades[$student->grade] : '') : '',
        ],
        'profile_picture' => [
            '#type' => 'managed_file',
            '#title' => 'Profile Picture',
            '#required' => TRUE,
            '#default_value' => !empty($student) ? $student->profile_picture : NULL,
            '#upload_location' => 'public://profile_pictures/',
            '#upload_validators' => [
                'file_validate_extensions' => ['png jpg jpeg'],
            ],
        ],
        'admission_date' => [
            '#type' => 'date_popup',
            '#title' => 'Admission Date',
            '#date_format' => 'Y-m-d',
            '#default_value' => !empty($student) ? format_date(strtotime($student->admission_date), 'custom', 'Y-m-d') : NULL,
            '#required' => TRUE
        ],
        'description' => [
            '#type' => 'text_format',
            '#title' => 'Description',
            '#format' => 'filtered_html',
            '#default_value' => !empty($student) ? $student->description : NULL,
            '#required' => FALSE,
        ],
        'submit' => [
            '#type' => 'submit',
            '#title' => 'Submit',
            '#value' => 'Submit',
        ],
        'student_id' => [
            '#type' => 'value',
            '#value' => !empty($student) ? $student->student_id : NULL,
        ],
    ];

    return $form;
}

function itonics_nabin_student_form_submit($form, &$form_state) {
    $values = $form_state['values'];

    $file = file_load($values['profile_picture']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'itonics_nabin_student', 'student_information', isset($values['student_id']) ? $values['student_id'] : 0);
    $profile_picture_id = $file->fid;

    $fields = [
        'first_name' => filter_xss($values['first_name']),
        'last_name' => filter_xss($values['last_name']),
        'gender' => filter_xss($values['gender']),
        'grade' => filter_xss($values['grade']),
        'profile_picture' => $profile_picture_id,
        'description' => filter_xss($values['description']['value']),
        'admission_date' => date($values['admission_date']),
        'updated' => REQUEST_TIME,
    ];

    if (empty($values['student_id'])) {
        $fields['created'] = REQUEST_TIME;
        drupal_write_record('itonics_nabin_student_information', $fields);
        drupal_set_message('Student created successfully.');
    } else {
        $fields['student_id'] = $values['student_id'];
        drupal_write_record('itonics_nabin_student_information', $fields, 'student_id');
        if (!empty($form_state['storage']['old_image'])) {
            $old_file = file_load($form_state['storage']['old_image']);
            file_usage_delete($old_file, 'itonics_nabin_student', 'student_information', $values['student_id']);
            file_delete($old_file);
        }
        drupal_set_message('Student updated successfully.');
    }

    $form_state['redirect'] = 'admin/itonics-nabin-student';
}

function itonics_nabin_student_delete_form($form, &$form_state, $student_id) {
    $form['student_id'] = [
        '#type' => 'value',
        '#value' => $student_id,
    ];

    return confirm_form(
        $form,
        t('Are you sure you want to delete this student?'),
        'admin/itonics-nabin-student',
        t('This action cannot be undone.'),
        t('Delete'),
        t('Cancel')
    );
}

function itonics_nabin_student_delete_form_submit($form, &$form_state) {
    $student_id = $form_state['values']['student_id'];

    $student = fetch_student($student_id);

    if (!empty($student->profile_picture)) {
        $file = file_load($student->profile_picture);
        if ($file) {
            file_usage_delete($file, 'itonics_nabin_student', 'student_information', $student_id);
            file_delete($file);
        }
    }

    db_delete('itonics_nabin_student_information')
        ->condition('student_id', $student_id)
        ->execute();

    drupal_set_message('Student deleted');
    $form_state['redirect'] = 'admin/itonics-nabin-student';
}
